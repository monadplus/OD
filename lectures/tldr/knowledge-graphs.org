#+title: Knowledge Graphs

Semi-structured data models.

Metadata as first-class citizen.

Linked data (Property Graphs do not provide means to define semantic pointers)

* RDF

The most basic **ontology** language.
Triples maps to FOL.
Syntax: XML/Turtle.
Triple example:  =ex:uri1 <rdf:type> ex:uri2=
Limited:
- Can't express n-ary relationships (reification is needed).
- No distinction between schema and data.
- No constraints.
- Reusing vocabularies is optional.

Blank nodes:
- No URI (cannot be referenced).
- They are used in OWL and other specific cases.

Popular RDF vocabularies (RDF graphs):
- SKOS: https://www.w3.org/TR/skos-reference/
- FOAF: http://xmlns.com/foaf/spec/
- SDMX: https://sdmx.org/
- QB: https://www.w3.org/TR/vocab-data-cube/
- GeoNames: http://www.geonames.org/ontology/documentation.html

RDF-start allows embedded triplets:
    employee :claims << :employee :jobTitle "Assistant" >>

* RDF Schema (RDFS)

Adds schema and constraints over RDF.

#+begin_src
PREFIX rdfs: <http://www.w3.org/2000/01/rdf-schema#>
#+end_src

Classes (Human, Lecturer, etc):

| Name          | Description                | Instance of                       |
|---------------+----------------------------+-----------------------------------|
| rdfs:Resource | Superclass of everything   | rdfs:Class                        |
| rdfs:Class    | Class of all classes       | rdfs:Class                        |
| rdfs:Literal  | Class of string, int, etc. | rdfs:Class, subclass of :Resource |
| rdf:Property  | Class of rdfs properties   | rdfs:Class                        |
| rdfs:Datatype |                            |                                   |

Properties (Lectures, ResponsibleFor, etc):

| Name               | Description                  | Instance of  |
|--------------------+------------------------------+--------------|
| rdfs:range         | codomain                     | rdf:Property |
| rdfs:domain        | domain                       | rdf:Property |
| rdf:type           | Resource instance of class   | rdf:Property |
| rdfs:subClassOf    |                              | rdf:Property |
| rdfs:subPropertyOf |                              | rdf:Property |
| rdfs:label         | human-readable resource name | rdf:Property |
| rdfs:comment       |                              | rdf:Property |

Example:

Schema:
- :Lecturer rdfs:subClassOf :Human
- :ResponsibleFor rdfs:subPropertyOf :Lectures
- :Lectures rdfs:domain :Human
- :Lectures rdfs:range :Course

Instance:
- :Oscar rdf:type :Lecturer
- :OpenData rdf:type :Course
- :Oscar ResponsibleFor :OpenData

Inferred knowledge:
- :Oscar rdf:type :Human
- :Oscar :Lectures :OpenData

** Reasoning

- Core type inference.
- Domain-specific inference.

Example:

#+begin_src
                      :Oscar rdf:type :Lecturer
                      :Lecturer rdfs:subClassOf :Human
                      --------------------------------
Core type inference   :Lecturer rdf:type :Class
                      :Human    rdf:type :Class
                      --------------------------------
Domain-specific inf.  :Oscar rdf:type :Human
#+end_src

- For a complete example see [[pdf:/home/arnau/master/OD/activities/RDFS-modeling-exercise-SOLUTION.pdf::2][RDFS Modeling Exercise]]


* SPARQL

De facto language to query RDF.

[[file:SPARQL.org][SPARQL notes]].

* Description Logics DL

OWL is based on DL.

Decidable subsets of FOL:
- Datalog
- Description Logics (e.g. OWL)

TBox : schema (e.g. Father \equiv Human \cap Male \cap \exists child)
ABox : instances (e.g. Father(John), child(John, Mary))

- Individual
- Atomic concept (e.g. Father)
- Role (e.g. child)

$AL family$
- Atomic concept
- Atomic role
- Atomic negation
- C \cap D
- Exists role \exists R
- Value restriction
- bottom

$ALU family$: C \cup D
$ALE family$: \exists R.C
...

Reasoning:
- Concept satisfiability: does C admit a model? (C != empty set)
- Concept subsumption: does C \subseteq D for all interpretations ?

Example of TBOX:
- Woman \equiv Person \cap Female
- Man \equiv Person \cap \neg Female
- Mother \equiv Woman \cap \exists hasChild.Person

Recall families are related with complexity
- AL, ALN \subseteq PTIME
- ALU, ALUN \subseteq NP-complete
- ...

*  OWL DL

rdf:Property
- owl:ObjectProperty (relation between instances of classes).
- owl:DatatypeProperty (relation between instance of class and RDF literals).

- subClassOf: C \subseteq D
- equivalentClass: C \equiv D
- disjointWith: C \subseteq \neg D
- sameIndividualAs: { President Bush } \equiv { G.W. Bush}
- differentFrom: { Obama } \equiv { G.W. Bush}
- subPropertyOf: P \subseteq Q
- equivalentProperty: P \equiv Q
- inverseOf: P \equiv P^-
- transitiveProperty: ancestor+ \subseteq ancestor
- functionalProperty: T \subseteq (\leq 1 hasChild)
- inverseFunctionalProperty: T \subseteq (\leq 1 hasChild^-)
- intersectionOf
- unionOf
- complementOf
- oneOf
- allValuesFrom
- someValuesFrom
- maxCardinality
- minCardinality

Constraint as reification:

#+BEGIN_SRC
_:a rdfs:subClassOf owl:Restriction
_:a owl:onProperty :Leads
_:a owl:allValuesFrom :Professor

:Department rdfs:subClassOf _:a   equivalent to  :Department \subseteq \forall :Leads.:Professor
#+END_SRC

* Tripletstore

Two main alternatives to store knowledge graphs:
- Relational implementation (triplestore)
- Graph native representation (graph databases)

** Triplestores

Store knowledge graphs.
SPARQL engine to query the graphs.
A layer providing basic semantic services (graphical exploratory, etc).

Storage in relation databases: a single table with 3 columns (Subject, Predicate, Object).
Since this approach does not scale up, they use a **quadtriples**: <graph name, subject, predicate, object>.
For each distinct graph name, they use a table <Subject, Predicate, Object> (horizontal partitioning.)

IOQA (Index-Only Query Answering):
- 7 combinations of indexes: S,O,P,SO,SP,OP,SOP.

Query Engine:
- SPARQL de facto for RDF(S) and OWL.
- Reasoners as a plugin.

SPARQL:
- Closed-world assumption (no inference).
- Two regimes: RDFS and OWL2 DL/QL.
- Optimization: materializes all inference, queries work under closed-world assumptions.

Reasoners:
- Open-world assumptions.
- Perform ontology reasoning.

Shape Constraining Language (SHACL): conformance checking.

Tools:
- Triplestores: GraphDB, Apache Rya, Amazon Neptune, ...
- Processing frameworks: Apache Jena, RDF4j, ...
- Reasoners: Ontop, Hermit, ...

* Graph-based Virtual Data Integration

See slides [[file:~/master/OD/lectures/12-Graph-based-Data-Integration.pdf][Graph-based Virtual Data Integration]]  (hard to make notes).
